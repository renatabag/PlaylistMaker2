Index: app/src/main/java/com/example/playlistmaker/Track_player.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.playlistmaker\n\nimport Track\nimport android.media.MediaPlayer\nimport android.os.Bundle\nimport android.os.Handler\nimport android.os.Looper\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.ImageButton\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport com.bumptech.glide.Glide\n\nclass Track_player : AppCompatActivity() {\n\n    companion object {\n        private const val STATE_DEFAULT = 0\n        private const val STATE_PREPARED = 1\n        private const val STATE_PLAYING = 2\n        private const val STATE_PAUSED = 3\n        private const val UPDATE_INTERVAL = 1000L\n    }\n\n    private var playerState = STATE_DEFAULT\n    private lateinit var play: ImageButton\n    private lateinit var mediaPlayer: MediaPlayer\n    private lateinit var track: Track\n    private val handler = Handler(Looper.getMainLooper())\n    private var updateTimeRunnable: Runnable? = null\n    private var trackDuration: Long = 0\n    private var startTime: Long = 0\n    private var elapsedTimeBeforePause: Long = 0 // Для сохранения позиции при паузе\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.track_player)\n\n        track = intent.getParcelableExtra<Track>(\"TRACK\") ?: run {\n            finish()\n            return\n        }\n\n        displayTrackDetails(track)\n        trackDuration = track.trackTimeMillis ?: 0\n\n        val backButton = findViewById<ImageButton>(R.id.menu_button)\n        backButton.setOnClickListener {\n            handleBackPressed()\n        }\n\n        play = findViewById(R.id.pause)\n        play.isEnabled = false\n\n        mediaPlayer = MediaPlayer()\n        preparePlayer()\n\n        play.setOnClickListener { playbackControl() }\n    }\n\n    private fun handleBackPressed() {\n        if (playerState == STATE_PLAYING) {\n            pausePlayer()\n            // Даем время для обработки паузы перед закрытием\n            handler.postDelayed({\n                finish()\n            }, 100)\n        } else {\n            finish()\n        }\n    }\n\n    private fun preparePlayer() {\n        try {\n            val url = track.previewUrl ?: run {\n                play.isEnabled = false\n                return\n            }\n\n            mediaPlayer.setDataSource(url)\n            mediaPlayer.prepareAsync()\n            mediaPlayer.setOnPreparedListener {\n                play.isEnabled = true\n                playerState = STATE_PREPARED\n                play.setImageResource(R.drawable.pause)\n                trackDuration = mediaPlayer.duration.toLong()\n\n                findViewById<TextView>(R.id.track_time_now).text = \"00:00\"\n            }\n            mediaPlayer.setOnCompletionListener {\n                playerState = STATE_PREPARED\n                play.setImageResource(R.drawable.pause)\n                stopTimer()\n\n                findViewById<TextView>(R.id.track_time_now).text = \"00:00\"\n                elapsedTimeBeforePause = 0\n            }\n            mediaPlayer.setOnErrorListener { _, _, _ ->\n                play.isEnabled = false\n                playerState = STATE_DEFAULT\n                true\n            }\n        } catch (e: Exception) {\n            e.printStackTrace()\n            play.isEnabled = false\n        }\n    }\n\n    private fun playbackControl() {\n        when(playerState) {\n            STATE_PLAYING -> pausePlayer()\n            STATE_PREPARED, STATE_PAUSED -> startPlayer()\n        }\n    }\n\n    private fun startTimer() {\n        startTime = System.currentTimeMillis() - elapsedTimeBeforePause\n\n        updateTimeRunnable = object : Runnable {\n            override fun run() {\n                val elapsed = System.currentTimeMillis() - startTime\n                findViewById<TextView>(R.id.track_time_now).text = Track.formatTrackTime(elapsed)\n\n                if (playerState == STATE_PLAYING) {\n                    handler.postDelayed(this, UPDATE_INTERVAL)\n                }\n            }\n        }\n        handler.post(updateTimeRunnable!!)\n    }\n\n    private fun stopTimer() {\n        elapsedTimeBeforePause = System.currentTimeMillis() - startTime\n        updateTimeRunnable?.let {\n            handler.removeCallbacks(it)\n            updateTimeRunnable = null\n        }\n    }\n\n    private fun startPlayer() {\n        mediaPlayer.seekTo(elapsedTimeBeforePause.toInt())\n        mediaPlayer.start()\n        playerState = STATE_PLAYING\n        play.setImageResource(R.drawable.play)\n        startTimer()\n    }\n\n    private fun pausePlayer() {\n        mediaPlayer.pause()\n        playerState = STATE_PAUSED\n        play.setImageResource(R.drawable.pause)\n        stopTimer()\n        elapsedTimeBeforePause = System.currentTimeMillis() - startTime\n    }\n\n    override fun onPause() {\n        super.onPause()\n        if (playerState == STATE_PLAYING) {\n            pausePlayer()\n        }\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        stopTimer()\n        mediaPlayer.release()\n    }\n\n    private fun displayTrackDetails(track: Track) {\n        findViewById<TextView>(R.id.track_name).text = track.trackName\n        findViewById<TextView>(R.id.artist_name).text = track.artistName\n        findViewById<TextView>(R.id.track_time).text = Track.formatTrackTime(track.trackTimeMillis ?: 0)\n        findViewById<TextView>(R.id.track_time_now).text = \"00:00\"\n        findViewById<TextView>(R.id.year_label_text).text = track.getReleaseYear()\n        findViewById<TextView>(R.id.genre_label_text).text = track.primaryGenreName\n        findViewById<TextView>(R.id.country_label_text).text = track.country\n\n        val artworkUrl = track.artworkUrl100?.replace(\"100x100bb.jpg\", \"512x512bb.jpg\")\n        Glide.with(this)\n            .load(artworkUrl)\n            .placeholder(R.drawable.placeholder_track)\n            .error(R.drawable.error)\n            .centerCrop()\n            .into(findViewById(R.id.item_image))\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/playlistmaker/Track_player.kt b/app/src/main/java/com/example/playlistmaker/Track_player.kt
--- a/app/src/main/java/com/example/playlistmaker/Track_player.kt	(revision ed6ca14e4f40b3aa6172982348763b627e8b424a)
+++ b/app/src/main/java/com/example/playlistmaker/Track_player.kt	(date 1748786679636)
@@ -5,8 +5,11 @@
 import android.os.Bundle
 import android.os.Handler
 import android.os.Looper
+<<<<<<< HEAD
 import android.widget.Button
 import android.widget.EditText
+=======
+>>>>>>> 6b0bad6 (Commit 1)
 import android.widget.ImageButton
 import android.widget.TextView
 import androidx.appcompat.app.AppCompatActivity
@@ -30,7 +33,11 @@
     private var updateTimeRunnable: Runnable? = null
     private var trackDuration: Long = 0
     private var startTime: Long = 0
+<<<<<<< HEAD
     private var elapsedTimeBeforePause: Long = 0 // Для сохранения позиции при паузе
+=======
+    private var elapsedTimeBeforePause: Long = 0
+>>>>>>> 6b0bad6 (Commit 1)
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
@@ -61,7 +68,10 @@
     private fun handleBackPressed() {
         if (playerState == STATE_PLAYING) {
             pausePlayer()
+<<<<<<< HEAD
             // Даем время для обработки паузы перед закрытием
+=======
+>>>>>>> 6b0bad6 (Commit 1)
             handler.postDelayed({
                 finish()
             }, 100)
Index: app/src/main/java/com/example/playlistmaker/SearchActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.playlistmaker\n\nimport TrackAdapter\nimport android.annotation.SuppressLint\nimport android.content.BroadcastReceiver\nimport android.content.Context\nimport android.content.Intent\nimport android.content.IntentFilter\nimport android.net.ConnectivityManager\nimport android.os.Bundle\nimport android.os.Handler\nimport android.os.Looper\nimport android.view.MotionEvent\nimport android.view.View\nimport android.view.inputmethod.EditorInfo\nimport android.view.inputmethod.InputMethodManager\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.ImageView\nimport android.widget.LinearLayout\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.content.ContextCompat\nimport androidx.core.widget.doAfterTextChanged\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.google.android.material.button.MaterialButton\nimport com.google.android.material.progressindicator.CircularProgressIndicator\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\nimport java.util.Locale\n\nclass SearchActivity : AppCompatActivity() {\n\n    private lateinit var inputEditText: EditText\n    private lateinit var recycler: RecyclerView\n    private lateinit var emptyStateContainer: LinearLayout\n    private lateinit var errorStateContainer: LinearLayout\n    private lateinit var placeholderMessage: TextView\n    private lateinit var connectionErrorMessage: TextView\n    private lateinit var adapter: TrackAdapter\n    private var searchText: String = \"\"\n    private lateinit var searchHistory: SearchHistory\n    private lateinit var clearHistoryButton: Button\n    private lateinit var historyTitle: TextView\n    private lateinit var clearIcon: ImageView\n\n    private lateinit var progressBar: CircularProgressIndicator\n    private val handler = Handler(Looper.getMainLooper())\n    private var searchRunnable: Runnable? = null\n    private val debounceDelay = 2000L\n\n    private val networkChangeReceiver = object : BroadcastReceiver() {\n        override fun onReceive(context: Context?, intent: Intent?) {\n            if (isNetworkAvailable()) {\n                connectionErrorMessage.text = \"Интернет доступен\"\n                performSearch()\n            } else {\n                showErrorState(\"Проблемы со связью\", \"Проверьте подключение к интернету\")\n            }\n        }\n    }\n\n    @SuppressLint(\"ClickableViewAccessibility\", \"WrongViewCast\", \"SoonBlockedPrivateApi\")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_searcch)\n\n        inputEditText = findViewById(R.id.inputEditText)\n\n        try {\n            val field = TextView::class.java.getDeclaredField(\"mCursorDrawableRes\")\n            field.isAccessible = true\n            field.set(inputEditText, R.drawable.cursor_blue)\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n\n        searchHistory = SearchHistory(this)\n\n        adapter = TrackAdapter(emptyList()) { track ->\n            val intent = Intent(this, Track_player::class.java).apply {\n                putExtra(\"TRACK\", track)\n            }\n            startActivity(intent)\n            searchHistory.addTrack(track)\n        }\n\n        clearHistoryButton = findViewById(R.id.clearHistoryButton)\n        clearHistoryButton.setOnClickListener {\n            clearHistory()\n        }\n\n        historyTitle = findViewById(R.id.historyTitle)\n        clearIcon = findViewById(R.id.clearIcon)\n\n        progressBar = findViewById(R.id.progressBar)\n        val backButton = findViewById<MaterialButton>(R.id.button_back)\n        inputEditText = findViewById(R.id.inputEditText)\n        recycler = findViewById(R.id.tracksList)\n        emptyStateContainer = findViewById(R.id.emptyStateContainer)\n        errorStateContainer = findViewById(R.id.errorStateContainer)\n        placeholderMessage = findViewById(R.id.placeholderMessage)\n        connectionErrorMessage = findViewById(R.id.connectionErrorMessage)\n        val retryButton = findViewById<Button>(R.id.retryButton)\n        retryButton.setOnClickListener {\n            performSearch()\n        }\n\n        recycler.layoutManager = LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)\n        recycler.adapter = adapter\n\n        recycler.visibility = View.GONE\n        emptyStateContainer.visibility = View.VISIBLE\n\n        backButton.setOnClickListener {\n            finish()\n        }\n\n        clearIcon.setOnClickListener {\n            clearSearchInput()\n        }\n\n        if (inputEditText.text.isNullOrEmpty()) {\n            showHistory()\n        }\n\n        if (savedInstanceState != null) {\n            searchText = savedInstanceState.getString(SEARCH_TEXT, \"\")\n            inputEditText.setText(searchText)\n        }\n\n        inputEditText.doAfterTextChanged { text ->\n            searchText = text?.toString() ?: \"\"\n            if (text.isNullOrEmpty()) {\n                inputEditText.setCompoundDrawablesRelativeWithIntrinsicBounds(\n                    ContextCompat.getDrawable(this, R.drawable.baseline_search_24), null, null, null\n                )\n                showHistory()\n            } else {\n                inputEditText.setCompoundDrawablesRelativeWithIntrinsicBounds(\n                    ContextCompat.getDrawable(this, R.drawable.baseline_search_24), null,\n                    ContextCompat.getDrawable(this, R.drawable.baseline_clear_24), null\n                )\n                searchRunnable?.let { handler.removeCallbacks(it) }\n                searchRunnable = Runnable {\n                    performSearch()\n                }\n                handler.postDelayed(searchRunnable!!, debounceDelay)\n            }\n        }\n\n        inputEditText.setOnTouchListener { _, event ->\n            if (event.action == MotionEvent.ACTION_UP) {\n                if (event.rawX >= (inputEditText.right - inputEditText.compoundPaddingEnd)) {\n                    clearSearchInput()\n                    return@setOnTouchListener true\n                }\n            }\n            return@setOnTouchListener false\n        }\n\n        inputEditText.setOnEditorActionListener { _, actionId, _ ->\n            if (actionId == EditorInfo.IME_ACTION_DONE) {\n                searchRunnable?.let { handler.removeCallbacks(it) }\n                performSearch()\n                hideKeyboard()\n                true\n            } else {\n                false\n            }\n        }\n\n        if (!isNetworkAvailable()) {\n            showErrorState(\"Нет подключения к интернету\", \"Проверьте подключение к интернету\")\n        } else {\n            showContent()\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        registerReceiver(networkChangeReceiver, IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION))\n    }\n\n    override fun onPause() {\n        super.onPause()\n        searchRunnable?.let { handler.removeCallbacks(it) }\n        unregisterReceiver(networkChangeReceiver)\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        searchRunnable?.let { handler.removeCallbacks(it) }\n    }\n\n    private fun showHistory() {\n        val history = searchHistory.getHistory()\n        if (history.isNotEmpty()) {\n            adapter.updateTracks(history)\n            recycler.visibility = View.VISIBLE\n            emptyStateContainer.visibility = View.GONE\n            errorStateContainer.visibility = View.GONE\n            clearHistoryButton.visibility = View.VISIBLE\n            historyTitle.visibility = View.VISIBLE\n        } else {\n            recycler.visibility = View.GONE\n            emptyStateContainer.visibility = View.GONE\n            errorStateContainer.visibility = View.GONE\n            clearHistoryButton.visibility = View.GONE\n            historyTitle.visibility = View.GONE\n        }\n    }\n\n\n    private fun clearSearchInput() {\n        inputEditText.setText(\"\")\n        hideKeyboard()\n        showHistory()\n    }\n\n    private fun hideKeyboard() {\n        val inputMethodManager = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\n        inputMethodManager.hideSoftInputFromWindow(inputEditText.windowToken, 0)\n    }\n\n    private fun performSearch() {\n        if (!isNetworkAvailable()) {\n            showErrorState(\"Проблемы со связью\", \"Проверьте подключение к интернету\")\n            return\n        }\n        val query = searchText.trim().lowercase(Locale.getDefault())\n\n        if (query.isEmpty()) {\n            showHistory()\n            return\n        }\n\n        showLoading()\n\n        RetrofitClient.itunesApi.search(query).enqueue(object : Callback<TrackResponse> {\n            override fun onResponse(call: Call<TrackResponse>, response: Response<TrackResponse>) {\n                hideLoading()\n                if (response.isSuccessful) {\n                    val tracks = response.body()?.results ?: emptyList()\n                    adapter.updateTracks(tracks)\n                    if (tracks.isEmpty()) {\n                        showEmptyState()\n                    } else {\n                        showContent()\n                    }\n                } else {\n                    showErrorState(\"Ошибка при загрузке данных\", \"Код: ${response.code()}, Сообщение: ${response.message()}\")\n                }\n            }\n\n            override fun onFailure(call: Call<TrackResponse>, t: Throwable) {\n                showErrorState(\"Ошибка сети\", t.message ?: \"Неизвестная ошибка\")\n                t.printStackTrace()\n            }\n        })\n    }\n\n    private fun showLoading() {\n        progressBar.visibility = View.VISIBLE\n        recycler.visibility = View.GONE\n        emptyStateContainer.visibility = View.GONE\n        errorStateContainer.visibility = View.GONE\n        clearHistoryButton.visibility = View.GONE\n        historyTitle.visibility = View.GONE\n\n        progressBar.bringToFront()\n    }\n\n    private fun hideLoading() {\n        progressBar.visibility = View.GONE\n    }\n\n    private fun showContent() {\n        recycler.visibility = View.VISIBLE\n        emptyStateContainer.visibility = View.GONE\n        errorStateContainer.visibility = View.GONE\n    }\n\n    private fun showEmptyState() {\n        recycler.visibility = View.GONE\n        emptyStateContainer.visibility = View.VISIBLE\n        errorStateContainer.visibility = View.GONE\n        clearHistoryButton.visibility = View.GONE\n        historyTitle.visibility = View.GONE\n    }\n\n    private fun showErrorState(title: String, message: String) {\n        recycler.visibility = View.GONE\n        emptyStateContainer.visibility = View.GONE\n        errorStateContainer.visibility = View.VISIBLE\n        connectionErrorMessage.text = \"$title\\n$message\"\n    }\n\n    private fun isNetworkAvailable(): Boolean {\n        val connectivityManager = getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\n        val networkInfo = connectivityManager.activeNetworkInfo\n        return networkInfo != null && networkInfo.isConnected\n    }\n\n    override fun onSaveInstanceState(outState: Bundle) {\n        super.onSaveInstanceState(outState)\n        outState.putString(SEARCH_TEXT, searchText)\n    }\n\n    private fun clearHistory() {\n        searchHistory.clearHistory()\n        showHistory()\n    }\n\n    companion object {\n        private const val SEARCH_TEXT = \"SEARCH_TEXT\"\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/playlistmaker/SearchActivity.kt b/app/src/main/java/com/example/playlistmaker/SearchActivity.kt
--- a/app/src/main/java/com/example/playlistmaker/SearchActivity.kt	(revision ed6ca14e4f40b3aa6172982348763b627e8b424a)
+++ b/app/src/main/java/com/example/playlistmaker/SearchActivity.kt	(date 1748786653782)
@@ -1,307 +1,102 @@
 package com.example.playlistmaker
 
+import Track
 import TrackAdapter
 import android.annotation.SuppressLint
-import android.content.BroadcastReceiver
 import android.content.Context
-import android.content.Intent
-import android.content.IntentFilter
-import android.net.ConnectivityManager
 import android.os.Bundle
-import android.os.Handler
-import android.os.Looper
+import android.text.Editable
+import android.text.TextWatcher
 import android.view.MotionEvent
-import android.view.View
-import android.view.inputmethod.EditorInfo
 import android.view.inputmethod.InputMethodManager
-import android.widget.Button
 import android.widget.EditText
-import android.widget.ImageView
-import android.widget.LinearLayout
-import android.widget.TextView
 import androidx.appcompat.app.AppCompatActivity
 import androidx.core.content.ContextCompat
 import androidx.core.widget.doAfterTextChanged
 import androidx.recyclerview.widget.LinearLayoutManager
 import androidx.recyclerview.widget.RecyclerView
 import com.google.android.material.button.MaterialButton
-import com.google.android.material.progressindicator.CircularProgressIndicator
-import retrofit2.Call
-import retrofit2.Callback
-import retrofit2.Response
-import java.util.Locale
+import kotlin.random.Random
 
 class SearchActivity : AppCompatActivity() {
 
     private lateinit var inputEditText: EditText
-    private lateinit var recycler: RecyclerView
-    private lateinit var emptyStateContainer: LinearLayout
-    private lateinit var errorStateContainer: LinearLayout
-    private lateinit var placeholderMessage: TextView
-    private lateinit var connectionErrorMessage: TextView
-    private lateinit var adapter: TrackAdapter
     private var searchText: String = ""
-    private lateinit var searchHistory: SearchHistory
-    private lateinit var clearHistoryButton: Button
-    private lateinit var historyTitle: TextView
-    private lateinit var clearIcon: ImageView
-
-    private lateinit var progressBar: CircularProgressIndicator
-    private val handler = Handler(Looper.getMainLooper())
-    private var searchRunnable: Runnable? = null
-    private val debounceDelay = 2000L
+    private val textWatcher = object : TextWatcher {
+        override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
 
-    private val networkChangeReceiver = object : BroadcastReceiver() {
-        override fun onReceive(context: Context?, intent: Intent?) {
-            if (isNetworkAvailable()) {
-                connectionErrorMessage.text = "Интернет доступен"
-                performSearch()
-            } else {
-                showErrorState("Проблемы со связью", "Проверьте подключение к интернету")
-            }
+        override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
+            searchText = s.toString()
         }
+
+        override fun afterTextChanged(s: Editable?) {}
     }
 
-    @SuppressLint("ClickableViewAccessibility", "WrongViewCast", "SoonBlockedPrivateApi")
+    @SuppressLint("ClickableViewAccessibility", "WrongViewCast")
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_searcch)
 
-        inputEditText = findViewById(R.id.inputEditText)
-
-        try {
-            val field = TextView::class.java.getDeclaredField("mCursorDrawableRes")
-            field.isAccessible = true
-            field.set(inputEditText, R.drawable.cursor_blue)
-        } catch (e: Exception) {
-            e.printStackTrace()
-        }
-
-        searchHistory = SearchHistory(this)
-
-        adapter = TrackAdapter(emptyList()) { track ->
-            val intent = Intent(this, Track_player::class.java).apply {
-                putExtra("TRACK", track)
-            }
-            startActivity(intent)
-            searchHistory.addTrack(track)
-        }
-
-        clearHistoryButton = findViewById(R.id.clearHistoryButton)
-        clearHistoryButton.setOnClickListener {
-            clearHistory()
-        }
-
-        historyTitle = findViewById(R.id.historyTitle)
-        clearIcon = findViewById(R.id.clearIcon)
-
-        progressBar = findViewById(R.id.progressBar)
         val backButton = findViewById<MaterialButton>(R.id.button_back)
         inputEditText = findViewById(R.id.inputEditText)
-        recycler = findViewById(R.id.tracksList)
-        emptyStateContainer = findViewById(R.id.emptyStateContainer)
-        errorStateContainer = findViewById(R.id.errorStateContainer)
-        placeholderMessage = findViewById(R.id.placeholderMessage)
-        connectionErrorMessage = findViewById(R.id.connectionErrorMessage)
-        val retryButton = findViewById<Button>(R.id.retryButton)
-        retryButton.setOnClickListener {
-            performSearch()
-        }
-
-        recycler.layoutManager = LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)
-        recycler.adapter = adapter
-
-        recycler.visibility = View.GONE
-        emptyStateContainer.visibility = View.VISIBLE
 
         backButton.setOnClickListener {
             finish()
         }
 
-        clearIcon.setOnClickListener {
-            clearSearchInput()
-        }
-
-        if (inputEditText.text.isNullOrEmpty()) {
-            showHistory()
-        }
-
         if (savedInstanceState != null) {
             searchText = savedInstanceState.getString(SEARCH_TEXT, "")
             inputEditText.setText(searchText)
         }
 
+        inputEditText.addTextChangedListener(textWatcher)
+
+
         inputEditText.doAfterTextChanged { text ->
-            searchText = text?.toString() ?: ""
             if (text.isNullOrEmpty()) {
-                inputEditText.setCompoundDrawablesRelativeWithIntrinsicBounds(
-                    ContextCompat.getDrawable(this, R.drawable.baseline_search_24), null, null, null
-                )
-                showHistory()
+                inputEditText.setCompoundDrawablesRelativeWithIntrinsicBounds(ContextCompat.getDrawable(this, R.drawable.baseline_search_24), null, null, null);
             } else {
-                inputEditText.setCompoundDrawablesRelativeWithIntrinsicBounds(
-                    ContextCompat.getDrawable(this, R.drawable.baseline_search_24), null,
-                    ContextCompat.getDrawable(this, R.drawable.baseline_clear_24), null
-                )
-                searchRunnable?.let { handler.removeCallbacks(it) }
-                searchRunnable = Runnable {
-                    performSearch()
-                }
-                handler.postDelayed(searchRunnable!!, debounceDelay)
+                inputEditText.setCompoundDrawablesRelativeWithIntrinsicBounds(ContextCompat.getDrawable(this, R.drawable.baseline_search_24), null, ContextCompat.getDrawable(this, R.drawable.baseline_clear_24), null);
             }
         }
 
-        inputEditText.setOnTouchListener { _, event ->
+        inputEditText.setOnTouchListener { v, event ->
             if (event.action == MotionEvent.ACTION_UP) {
                 if (event.rawX >= (inputEditText.right - inputEditText.compoundPaddingEnd)) {
-                    clearSearchInput()
-                    return@setOnTouchListener true
-                }
-            }
-            return@setOnTouchListener false
-        }
-
-        inputEditText.setOnEditorActionListener { _, actionId, _ ->
-            if (actionId == EditorInfo.IME_ACTION_DONE) {
-                searchRunnable?.let { handler.removeCallbacks(it) }
-                performSearch()
-                hideKeyboard()
-                true
-            } else {
-                false
-            }
-        }
-
-        if (!isNetworkAvailable()) {
-            showErrorState("Нет подключения к интернету", "Проверьте подключение к интернету")
-        } else {
-            showContent()
-        }
-    }
-
-    override fun onResume() {
-        super.onResume()
-        registerReceiver(networkChangeReceiver, IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION))
-    }
-
-    override fun onPause() {
-        super.onPause()
-        searchRunnable?.let { handler.removeCallbacks(it) }
-        unregisterReceiver(networkChangeReceiver)
-    }
-
-    override fun onDestroy() {
-        super.onDestroy()
-        searchRunnable?.let { handler.removeCallbacks(it) }
-    }
-
-    private fun showHistory() {
-        val history = searchHistory.getHistory()
-        if (history.isNotEmpty()) {
-            adapter.updateTracks(history)
-            recycler.visibility = View.VISIBLE
-            emptyStateContainer.visibility = View.GONE
-            errorStateContainer.visibility = View.GONE
-            clearHistoryButton.visibility = View.VISIBLE
-            historyTitle.visibility = View.VISIBLE
-        } else {
-            recycler.visibility = View.GONE
-            emptyStateContainer.visibility = View.GONE
-            errorStateContainer.visibility = View.GONE
-            clearHistoryButton.visibility = View.GONE
-            historyTitle.visibility = View.GONE
-        }
-    }
-
-
-    private fun clearSearchInput() {
-        inputEditText.setText("")
-        hideKeyboard()
-        showHistory()
-    }
-
-    private fun hideKeyboard() {
-        val inputMethodManager = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
-        inputMethodManager.hideSoftInputFromWindow(inputEditText.windowToken, 0)
-    }
-
-    private fun performSearch() {
-        if (!isNetworkAvailable()) {
-            showErrorState("Проблемы со связью", "Проверьте подключение к интернету")
-            return
-        }
-        val query = searchText.trim().lowercase(Locale.getDefault())
-
-        if (query.isEmpty()) {
-            showHistory()
-            return
-        }
-
-        showLoading()
-
-        RetrofitClient.itunesApi.search(query).enqueue(object : Callback<TrackResponse> {
-            override fun onResponse(call: Call<TrackResponse>, response: Response<TrackResponse>) {
-                hideLoading()
-                if (response.isSuccessful) {
-                    val tracks = response.body()?.results ?: emptyList()
-                    adapter.updateTracks(tracks)
-                    if (tracks.isEmpty()) {
-                        showEmptyState()
-                    } else {
-                        showContent()
-                    }
-                } else {
-                    showErrorState("Ошибка при загрузке данных", "Код: ${response.code()}, Сообщение: ${response.message()}")
+                    inputEditText.setText("")
+                    hideKeyboard()
+                    return@setOnTouchListener true
                 }
             }
-
-            override fun onFailure(call: Call<TrackResponse>, t: Throwable) {
-                showErrorState("Ошибка сети", t.message ?: "Неизвестная ошибка")
-                t.printStackTrace()
-            }
-        })
-    }
-
-    private fun showLoading() {
-        progressBar.visibility = View.VISIBLE
-        recycler.visibility = View.GONE
-        emptyStateContainer.visibility = View.GONE
-        errorStateContainer.visibility = View.GONE
-        clearHistoryButton.visibility = View.GONE
-        historyTitle.visibility = View.GONE
-
-        progressBar.bringToFront()
-    }
+            return@setOnTouchListener false
+        }
 
-    private fun hideLoading() {
-        progressBar.visibility = View.GONE
-    }
 
-    private fun showContent() {
-        recycler.visibility = View.VISIBLE
-        emptyStateContainer.visibility = View.GONE
-        errorStateContainer.visibility = View.GONE
-    }
-
-    private fun showEmptyState() {
-        recycler.visibility = View.GONE
-        emptyStateContainer.visibility = View.VISIBLE
-        errorStateContainer.visibility = View.GONE
-        clearHistoryButton.visibility = View.GONE
-        historyTitle.visibility = View.GONE
-    }
-
-    private fun showErrorState(title: String, message: String) {
-        recycler.visibility = View.GONE
-        emptyStateContainer.visibility = View.GONE
-        errorStateContainer.visibility = View.VISIBLE
-        connectionErrorMessage.text = "$title\n$message"
-    }
-
-    private fun isNetworkAvailable(): Boolean {
-        val connectivityManager = getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
-        val networkInfo = connectivityManager.activeNetworkInfo
-        return networkInfo != null && networkInfo.isConnected
+        val recycler = findViewById<RecyclerView>(R.id.tracksList)
+        val tracks = listOf(
+             Track(
+                trackName = "Billie Jean",
+                artistName = "Michael Jackson",
+                trackTime = "4:35",
+                artworkUrl100 = "https://is5-ssl.mzstatic.com/image/thumb/Music125/v4/3d/9d/38/3d9d3811-71f0-3a0e-1ada-3004e56ff852/827969428726.jpg/100x100bb.jpg"
+            ), Track(
+                trackName = "Stayin' Alive",
+                artistName = "Bee Gees",
+                trackTime = "4:10",
+                artworkUrl100 = "https://is4-ssl.mzstatic.com/image/thumb/Music115/v4/1f/80/1f/1f801fc1-8c0f-ea3e-d3e5-387c6619619e/16UMGIM86640.rgb.jpg/100x100bb.jpg"
+            ), Track(
+                trackName = "Whole Lotta Love",
+                artistName = "Led Zeppelin",
+                trackTime = "5:33",
+                artworkUrl100 = "https://is2-ssl.mzstatic.com/image/thumb/Music62/v4/7e/17/e3/7e17e33f-2efa-2a36-e916-7f808576cf6b/mzm.fyigqcbs.jpg/100x100bb.jpg"
+            ), Track(
+                trackName = "Sweet Child O'Mine",
+                artistName = "Guns N' Roses",
+                trackTime = "5:03",
+                artworkUrl100 = "https://is5-ssl.mzstatic.com/image/thumb/Music125/v4/a0/4d/c4/a04dc484-03cc-02aa-fa82-5334fcb4bc16/18UMGIM24878.rgb.jpg/100x100bb.jpg"
+            ))
+        recycler.layoutManager = LinearLayoutManager(this,  LinearLayoutManager.VERTICAL, false)
+        recycler.adapter = TrackAdapter(tracks)
     }
 
     override fun onSaveInstanceState(outState: Bundle) {
@@ -309,9 +104,9 @@
         outState.putString(SEARCH_TEXT, searchText)
     }
 
-    private fun clearHistory() {
-        searchHistory.clearHistory()
-        showHistory()
+    private fun hideKeyboard() {
+        val inputMethodManager = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
+        inputMethodManager.hideSoftInputFromWindow(inputEditText.windowToken, 0)
     }
 
     companion object {
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Thu Jan 16 18:45:13 MSK 2025\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-8.10.2-bin.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
--- a/gradle/wrapper/gradle-wrapper.properties	(revision ed6ca14e4f40b3aa6172982348763b627e8b424a)
+++ b/gradle/wrapper/gradle-wrapper.properties	(date 1748786530144)
@@ -1,6 +1,6 @@
 #Thu Jan 16 18:45:13 MSK 2025
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.10.2-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.11.1-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"testRunner\" value=\"CHOOSE_PER_TEST\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"gradleJvm\" value=\"#GRADLE_LOCAL_JAVA_HOME\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n            <option value=\"$PROJECT_DIR$/app\" />\n          </set>\n        </option>\n        <option name=\"resolveExternalAnnotations\" value=\"false\" />\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision ed6ca14e4f40b3aa6172982348763b627e8b424a)
+++ b/.idea/gradle.xml	(date 1748786678341)
@@ -1,6 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+<<<<<<< HEAD
   <component name="GradleMigrationSettings" migrationVersion="1" />
+=======
+>>>>>>> 6b0bad6 (Commit 1)
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
@@ -13,7 +16,10 @@
             <option value="$PROJECT_DIR$/app" />
           </set>
         </option>
+<<<<<<< HEAD
         <option name="resolveExternalAnnotations" value="false" />
+=======
+>>>>>>> 6b0bad6 (Commit 1)
       </GradleProjectSettings>
     </option>
   </component>
Index: .idea/AndroidProjectSystem.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/AndroidProjectSystem.xml b/.idea/AndroidProjectSystem.xml
new file mode 100644
--- /dev/null	(date 1748786530143)
+++ b/.idea/AndroidProjectSystem.xml	(date 1748786530143)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AndroidProjectSystem">
+    <option name="providerId" value="com.android.tools.idea.GradleProjectSystem" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/res/layout/track_player.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:background=\"@color/background\">\n\n        <androidx.constraintlayout.widget.ConstraintLayout\n            android:id=\"@+id/main_buttons\"\n            android:layout_width=\"@dimen/zero\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginLeft=\"@dimen/track_player_main_size\"\n            android:layout_marginTop=\"@dimen/thirty\"\n            android:layout_marginRight=\"@dimen/track_player_main_size\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toBottomOf=\"@id/artist_name\">\n\n            <ImageButton\n                android:id=\"@+id/pause\"\n                android:layout_width=\"@dimen/pause_size\"\n                android:layout_height=\"@dimen/pause_size\"\n                android:background=\"@null\"\n                android:scaleType=\"fitXY\"\n                app:layout_constraintBottom_toBottomOf=\"parent\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\"\n                app:srcCompat=\"@drawable/pause\" />\n\n            <ImageButton\n                android:id=\"@+id/add_to_album\"\n                android:layout_width=\"@dimen/track_icons\"\n                android:layout_height=\"@dimen/track_icons\"\n                android:layout_marginStart=\"@dimen/margine_track\"\n                android:background=\"@null\"\n                android:scaleType=\"fitXY\"\n                app:layout_constraintBottom_toBottomOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\"\n                app:srcCompat=\"@drawable/add_to_album\" />\n\n            <ImageButton\n                android:id=\"@+id/follow\"\n                android:layout_width=\"@dimen/track_icons\"\n                android:layout_height=\"@dimen/track_icons\"\n                android:layout_marginEnd=\"@dimen/margine_track\"\n                android:background=\"@null\"\n                android:scaleType=\"fitXY\"\n                app:layout_constraintBottom_toBottomOf=\"parent\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\"\n                app:srcCompat=\"@drawable/follow\" />\n        </androidx.constraintlayout.widget.ConstraintLayout>\n\n        <TextView\n            android:id=\"@+id/track_time_now\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"@dimen/four_dp\"\n            android:fontFamily=\"@font/ys_display_medium\"\n            android:text=\"@string/text_time\"\n            android:textColor=\"@color/dark_white\"\n            android:textSize=\"@dimen/time_size\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toBottomOf=\"@id/main_buttons\" />\n\n        <FrameLayout\n            android:id=\"@+id/frame_layout\"\n            android:layout_width=\"@dimen/zero\"\n            android:layout_height=\"wrap_content\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\">\n\n            <ImageButton\n                android:id=\"@+id/menu_button\"\n                android:layout_width=\"@dimen/track_player_main_size\"\n                android:layout_height=\"@dimen/track_player_main_size\"\n                android:layout_marginStart=\"@dimen/margine_track\"\n                android:layout_marginTop=\"@dimen/margine_track\"\n                android:layout_marginBottom=\"@dimen/margine_track\"\n                android:background=\"@null\"\n                android:scaleType=\"fitCenter\"\n                app:layout_constraintBottom_toBottomOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\"\n                android:tint=\"@color/track_text_color\"\n                app:srcCompat=\"@drawable/baseline_arrow_back_24\"\n                tools:ignore=\"UseAppTint\" />\n        </FrameLayout>\n\n        <ImageView\n            android:id=\"@+id/item_image\"\n            android:layout_width=\"@dimen/zero\"\n            android:layout_height=\"@dimen/zero\"\n            android:layout_marginStart=\"@dimen/track_player_main_size\"\n            android:layout_marginTop=\"@dimen/margine_image\"\n            android:layout_marginEnd=\"@dimen/track_player_main_size\"\n            android:layout_marginBottom=\"@dimen/track_player_main_size\"\n            android:adjustViewBounds=\"true\"\n            android:backgroundTint=\"@android:color/transparent\"\n            android:scaleType=\"fitXY\"\n            android:background=\"@drawable/card_corner_radius\"\n            android:src=\"@drawable/placeholder_track\"\n            app:layout_constraintDimensionRatio=\"1:1\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toBottomOf=\"@id/frame_layout\"\n            tools:ignore=\"ContentDescription\" />\n\n        <TextView\n            android:id=\"@+id/track_name\"\n            android:layout_width=\"@dimen/zero\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginStart=\"@dimen/track_player_main_size\"\n            android:layout_marginTop=\"@dimen/track_player_main_size\"\n            android:layout_marginEnd=\"@dimen/track_player_main_size\"\n            android:fontFamily=\"@font/ys_display_medium\"\n            android:text=\"@string/text_track\"\n            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\n            android:textSize=\"@dimen/main_text_size\"\n            android:maxLines=\"1\"\n            android:textColor=\"@color/dark_white\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toBottomOf=\"@id/item_image\" />\n\n        <TextView\n            android:id=\"@+id/artist_name\"\n            android:layout_width=\"@dimen/zero\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginStart=\"@dimen/track_player_main_size\"\n            android:layout_marginTop=\"@dimen/small_padding\"\n            android:layout_marginEnd=\"@dimen/track_player_main_size\"\n            android:fontFamily=\"@font/ys_display_medium\"\n            android:text=\"@string/text_track\"\n            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\n            android:textSize=\"@dimen/text_retry\"\n            android:textColor=\"@color/dark_white\"\n            android:maxLines=\"1\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toBottomOf=\"@id/track_name\" />\n\n        <ScrollView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"@dimen/zero\"\n            app:layout_constraintTop_toBottomOf=\"@id/track_time_now\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            >\n\n            <androidx.constraintlayout.widget.ConstraintLayout\n                android:id=\"@+id/text_description\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:paddingLeft=\"@dimen/margine_track\"\n                android:paddingTop=\"@dimen/thirty\"\n                android:paddingRight=\"@dimen/margine_track\"\n                >\n\n                <TextView\n                    android:id=\"@+id/duration_label\"\n                    android:layout_width=\"@dimen/zero\"\n                    android:layout_height=\"wrap_content\"\n                    android:fontFamily=\"@font/ys_display_medium\"\n                    android:text=\"@string/time\"\n\n\n                    android:textSize=\"@dimen/text_descriprion\"\n                    android:maxLines=\"1\"\n                    android:textColor=\"@color/grey\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintTop_toTopOf=\"parent\" />\n\n                <TextView\n                    android:id=\"@+id/track_time\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:fontFamily=\"@font/ys_display_medium\"\n                    android:text=\"@string/text_time\"\n                    android:maxLines=\"1\"\n                    android:textSize=\"@dimen/text_descriprion\"\n                    android:textColor=\"@color/track_text_color\"\n                    app:layout_constraintEnd_toEndOf=\"parent\"\n                    app:layout_constraintTop_toTopOf=\"parent\"\n                    tools:ignore=\"DuplicateIds\" />\n\n                <TextView\n                    android:id=\"@+id/album_label\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginTop=\"@dimen/margine_descriprion\"\n                    android:fontFamily=\"@font/ys_display_medium\"\n                    android:text=\"@string/album\"\n                    android:textColor=\"@color/grey\"\n                    android:textSize=\"@dimen/text_descriprion\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintTop_toBottomOf=\"@id/duration_label\" />\n\n                <TextView\n                    android:id=\"@+id/album_label_text\"\n                    android:layout_width=\"@dimen/zero\"\n                    android:layout_height=\"wrap_content\"\n                    android:fontFamily=\"@font/ys_display_medium\"\n                    android:text=\"@string/text_track\"\n                    android:textSize=\"@dimen/text_descriprion\"\n                    android:maxLines=\"1\"\n                    android:textColor=\"@color/track_text_color\"\n                    app:layout_constraintEnd_toEndOf=\"parent\"\n                    app:layout_constraintTop_toBottomOf=\"@id/duration_label\"\n                    app:layout_constraintBaseline_toBaselineOf=\"@+id/album_label\"\n                    app:layout_constraintStart_toEndOf=\"@id/album_label\"\n                    android:gravity=\"right\"/>\n\n                <TextView\n                    android:id=\"@+id/year_label\"\n                    android:layout_width=\"@dimen/zero\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginTop=\"@dimen/margine_descriprion\"\n                    android:fontFamily=\"@font/ys_display_medium\"\n                    android:text=\"@string/year\"\n                    android:textSize=\"@dimen/text_descriprion\"\n                    android:maxLines=\"1\"\n                    android:textColor=\"@color/grey\"\n                    app:layout_constraintEnd_toEndOf=\"parent\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintTop_toBottomOf=\"@id/album_label\" />\n\n                <TextView\n                    android:id=\"@+id/year_label_text\"\n                    android:layout_width=\"@dimen/zero\"\n                    android:maxLines=\"1\"\n                    android:layout_height=\"wrap_content\"\n                    android:fontFamily=\"@font/ys_display_medium\"\n                    android:text=\"@string/text_track\"\n                    android:textSize=\"@dimen/text_descriprion\"\n                    android:textColor=\"@color/track_text_color\"\n                    app:layout_constraintEnd_toEndOf=\"parent\"\n                    app:layout_constraintTop_toBottomOf=\"@id/duration_label\"\n                    app:layout_constraintBaseline_toBaselineOf=\"@+id/year_label\"/>\n\n                <TextView\n                    android:id=\"@+id/genre_label\"\n                    android:layout_width=\"@dimen/zero\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginTop=\"@dimen/margine_descriprion\"\n                    android:fontFamily=\"@font/ys_display_medium\"\n                    android:text=\"@string/genre\"\n                    android:textSize=\"@dimen/text_descriprion\"\n                    android:maxLines=\"1\"\n                    android:textColor=\"@color/grey\"\n                    app:layout_constraintEnd_toEndOf=\"parent\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintTop_toBottomOf=\"@id/year_label\" />\n\n                <TextView\n                    android:id=\"@+id/genre_label_text\"\n                    android:layout_width=\"@dimen/zero\"\n                    android:layout_height=\"wrap_content\"\n                    android:fontFamily=\"@font/ys_display_medium\"\n                    android:text=\"@string/text_track\"\n                    android:textSize=\"@dimen/text_descriprion\"\n                    android:maxLines=\"1\"\n                    android:textColor=\"@color/track_text_color\"\n                    app:layout_constraintEnd_toEndOf=\"parent\"\n                    app:layout_constraintTop_toBottomOf=\"@id/duration_label\"\n                    app:layout_constraintBaseline_toBaselineOf=\"@+id/genre_label\"/>\n\n                <TextView\n                    android:id=\"@+id/county_label\"\n                    android:layout_width=\"@dimen/zero\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginTop=\"@dimen/margine_descriprion\"\n                    android:fontFamily=\"@font/ys_display_medium\"\n                    android:text=\"@string/country\"\n                    android:textSize=\"@dimen/text_descriprion\"\n                    android:maxLines=\"1\"\n                    android:textColor=\"@color/grey\"\n                    app:layout_constraintEnd_toEndOf=\"parent\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintTop_toBottomOf=\"@id/genre_label\" />\n\n                <TextView\n                    android:id=\"@+id/country_label_text\"\n                    android:layout_width=\"@dimen/zero\"\n                    android:layout_height=\"wrap_content\"\n                    android:fontFamily=\"@font/ys_display_medium\"\n                    android:text=\"@string/text_track\"\n                    android:textSize=\"@dimen/text_descriprion\"\n                    android:maxLines=\"1\"\n                    android:textColor=\"@color/track_text_color\"\n                    app:layout_constraintEnd_toEndOf=\"parent\"\n                    app:layout_constraintTop_toBottomOf=\"@id/genre_label\"\n                    app:layout_constraintBottom_toBottomOf=\"parent\"\n                    app:layout_constraintBaseline_toBaselineOf=\"@+id/county_label\"/>\n\n            </androidx.constraintlayout.widget.ConstraintLayout>\n        </ScrollView>\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/track_player.xml b/app/src/main/res/layout/track_player.xml
--- a/app/src/main/res/layout/track_player.xml	(revision ed6ca14e4f40b3aa6172982348763b627e8b424a)
+++ b/app/src/main/res/layout/track_player.xml	(date 1748786680039)
@@ -27,7 +27,11 @@
                 app:layout_constraintEnd_toEndOf="parent"
                 app:layout_constraintStart_toStartOf="parent"
                 app:layout_constraintTop_toTopOf="parent"
+<<<<<<< HEAD
                 app:srcCompat="@drawable/pause" />
+=======
+                app:srcCompat="@drawable/play" />
+>>>>>>> 6b0bad6 (Commit 1)
 
             <ImageButton
                 android:id="@+id/add_to_album"
Index: gradle/libs.versions.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[versions]\nagp = \"8.8.2\"\nglide = \"4.14.2\"\nkotlin = \"1.9.0\"\ncoreKtx = \"1.15.0\"\njunit = \"4.13.2\"\njunitVersion = \"1.2.1\"\nespressoCore = \"3.6.1\"\nappcompat = \"1.7.0\"\nmaterial = \"1.12.0\"\nactivity = \"1.10.0\"\nconstraintlayout = \"2.2.0\"\nretrofit = \"2.9.0\"\nsupportAnnotations = \"28.0.0\"\n\n[libraries]\nandroidx-core-ktx = { group = \"androidx.core\", name = \"core-ktx\", version.ref = \"coreKtx\" }\ncompiler = { module = \"com.github.bumptech.glide:compiler\", version.ref = \"glide\" }\nconverter-gson = { module = \"com.squareup.retrofit2:converter-gson\", version.ref = \"retrofit\" }\nglide = { module = \"com.github.bumptech.glide:glide\", version.ref = \"glide\" }\njunit = { group = \"junit\", name = \"junit\", version.ref = \"junit\" }\nandroidx-junit = { group = \"androidx.test.ext\", name = \"junit\", version.ref = \"junitVersion\" }\nandroidx-espresso-core = { group = \"androidx.test.espresso\", name = \"espresso-core\", version.ref = \"espressoCore\" }\nandroidx-appcompat = { group = \"androidx.appcompat\", name = \"appcompat\", version.ref = \"appcompat\" }\nmaterial = { group = \"com.google.android.material\", name = \"material\", version.ref = \"material\" }\nandroidx-activity = { group = \"androidx.activity\", name = \"activity\", version.ref = \"activity\" }\nandroidx-constraintlayout = { group = \"androidx.constraintlayout\", name = \"constraintlayout\", version.ref = \"constraintlayout\" }\nretrofit = { module = \"com.squareup.retrofit2:retrofit\", version.ref = \"retrofit\" }\nsupport-annotations = { group = \"com.android.support\", name = \"support-annotations\", version.ref = \"supportAnnotations\" }\n\n[plugins]\nandroid-application = { id = \"com.android.application\", version.ref = \"agp\" }\nkotlin-android = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
--- a/gradle/libs.versions.toml	(revision ed6ca14e4f40b3aa6172982348763b627e8b424a)
+++ b/gradle/libs.versions.toml	(date 1748786678555)
@@ -1,5 +1,9 @@
 [versions]
+<<<<<<< HEAD
 agp = "8.8.2"
+=======
+agp = "8.9.0"
+>>>>>>> 6b0bad6 (Commit 1)
 glide = "4.14.2"
 kotlin = "1.9.0"
 coreKtx = "1.15.0"
