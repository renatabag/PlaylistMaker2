Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.gradle.kotlin.dsl.implementation\n\nplugins {\n    alias(libs.plugins.android.application)\n    alias(libs.plugins.kotlin.android)\n    id(\"kotlin-parcelize\".toString())\n}\n\nandroid {\n    namespace = \"com.example.playlistmaker\"\n    compileSdk = 35 // Обновлено до 35\n\n    defaultConfig {\n        applicationId = \"com.example.playlistmaker\"\n        minSdk = 29\n        targetSdk = 34\n        versionCode = 1\n        versionName = \"1.0\"\n\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            isMinifyEnabled = false\n            proguardFiles(\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n                \"proguard-rules.pro\"\n            )\n        }\n    }\n\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_1_8\n        targetCompatibility = JavaVersion.VERSION_1_8\n    }\n\n    kotlinOptions {\n        jvmTarget = \"1.8\"\n    }\n\n    buildFeatures {\n        viewBinding = true\n        aidl=true\n    }\n}\n\ndependencies {\n    implementation(\"androidx.core:core-ktx:1.15.0\")\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\n    implementation(\"androidx.activity:activity-ktx:1.10.0\")\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\n\n    implementation(\"com.google.android.material:material:1.11.0\")\n\n    testImplementation(\"junit:junit:4.13.2\")\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\n\n    implementation(\"com.github.bumptech.glide:glide:4.16.0\")\n    annotationProcessor(\"com.github.bumptech.glide:compiler:4.16.0\")\n\n    implementation(\"com.squareup.retrofit2:retrofit:2.9.0\")\n    implementation(\"com.squareup.retrofit2:converter-gson:2.9.0\")\n    implementation (\"com.google.android.material:material:1.4.0\")\n\n    implementation (\"com.github.bumptech.glide:glide:4.12.0\")\n    annotationProcessor (\"com.github.bumptech.glide:compiler:4.12.0\")\n    implementation (\"androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1\")\n    implementation (\"androidx.activity:activity-ktx:1.7.0\")\n    implementation (\"io.insert-koin:koin-android:3.4.3\")\n    implementation (\"androidx.lifecycle:lifecycle-runtime-ktx:2.6.0\")\n    implementation (\"androidx.lifecycle:lifecycle-livedata-ktx:2.6.0\")\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 85341f49f551c005f0326bd5e38756e9b64522fd)
+++ b/app/build.gradle.kts	(date 1753952404913)
@@ -71,4 +71,5 @@
     implementation ("io.insert-koin:koin-android:3.4.3")
     implementation ("androidx.lifecycle:lifecycle-runtime-ktx:2.6.0")
     implementation ("androidx.lifecycle:lifecycle-livedata-ktx:2.6.0")
+    implementation ("io.insert-koin:koin-android:3.3.0")
 }
\ No newline at end of file
Index: app/src/main/java/com/example/playlistmaker/data/repositories/SearchHistoryRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import com.example.playlistmaker.data.mappers.TrackMapper\nimport com.example.playlistmaker.data.storage.SharedPrefsStorage\nimport com.example.playlistmaker.domain.models.Track\nimport com.example.playlistmaker.domain.repositories.SearchHistoryRepository\n\nclass SearchHistoryRepositoryImpl(\n    private val sharedPrefsStorage: SharedPrefsStorage,\n    private val mapper: TrackMapper\n) : SearchHistoryRepository {\n\n    override suspend fun getHistory(): List<Track> {\n        return sharedPrefsStorage.getSearchHistory().map { mapper.mapToDomain(it) }\n    }\n\n    override suspend fun addTrack(track: Track) {\n        val currentHistory = sharedPrefsStorage.getSearchHistory().toMutableList()\n        val trackDto = mapper.mapToDto(track)\n\n        currentHistory.removeAll { it.trackId == track.trackId }\n        currentHistory.add(0, trackDto)\n\n        if (currentHistory.size > MAX_HISTORY_SIZE) {\n            currentHistory.subList(MAX_HISTORY_SIZE, currentHistory.size).clear()\n        }\n\n        sharedPrefsStorage.saveSearchHistory(currentHistory)\n    }\n\n    override suspend fun clearHistory() {\n        sharedPrefsStorage.clearSearchHistory()\n    }\n\n    companion object {\n        private const val MAX_HISTORY_SIZE = 10\n    }\n}
===================================================================
diff --git a/app/src/main/java/com/example/playlistmaker/data/repositories/SearchHistoryRepositoryImpl.kt b/app/src/main/java/com/example/playlistmaker/data/repositories/SearchHistoryRepositoryImpl.kt
--- a/app/src/main/java/com/example/playlistmaker/data/repositories/SearchHistoryRepositoryImpl.kt	(revision 85341f49f551c005f0326bd5e38756e9b64522fd)
+++ b/app/src/main/java/com/example/playlistmaker/data/repositories/SearchHistoryRepositoryImpl.kt	(date 1753953878362)
@@ -1,3 +1,5 @@
+package com.example.playlistmaker.data.repositories
+
 import com.example.playlistmaker.data.mappers.TrackMapper
 import com.example.playlistmaker.data.storage.SharedPrefsStorage
 import com.example.playlistmaker.domain.models.Track
Index: app/src/main/java/com/example/playlistmaker/data/network/RetrofitClient.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.playlistmaker.data.network\n\nimport com.example.playlistmaker.creator.Creator.BASE_URL\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\n\nobject RetrofitClient {\n    val retrofit: Retrofit by lazy {\n        Retrofit.Builder()\n            .baseUrl(BASE_URL)\n            .addConverterFactory(GsonConverterFactory.create())\n            .build()\n    }\n\n    val itunesApi: ItunesApi by lazy {\n        retrofit.create(ItunesApi::class.java)\n    }\n\n}
===================================================================
diff --git a/app/src/main/java/com/example/playlistmaker/data/network/RetrofitClient.kt b/app/src/main/java/com/example/playlistmaker/data/network/RetrofitClient.kt
--- a/app/src/main/java/com/example/playlistmaker/data/network/RetrofitClient.kt	(revision 85341f49f551c005f0326bd5e38756e9b64522fd)
+++ b/app/src/main/java/com/example/playlistmaker/data/network/RetrofitClient.kt	(date 1753956033424)
@@ -1,11 +1,11 @@
 package com.example.playlistmaker.data.network
 
-import com.example.playlistmaker.creator.Creator.BASE_URL
 import retrofit2.Retrofit
 import retrofit2.converter.gson.GsonConverterFactory
 
 
 object RetrofitClient {
+    internal const val BASE_URL = "https://itunes.apple.com/"
     val retrofit: Retrofit by lazy {
         Retrofit.Builder()
             .baseUrl(BASE_URL)
Index: app/src/main/java/com/example/playlistmaker/presentation/ui/activities/TrackPlayer.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.playlistmaker.presentation.ui.activities\n\nimport android.annotation.SuppressLint\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Build\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.lifecycle.lifecycleScope\nimport androidx.lifecycle.repeatOnLifecycle\nimport com.bumptech.glide.Glide\nimport com.example.playlistmaker.R\nimport com.example.playlistmaker.domain.TrackUtils\nimport com.example.playlistmaker.presentation.viewmodels.PlayerViewModel\nimport kotlinx.coroutines.launch\nimport android.widget.ImageButton\nimport android.widget.TextView\nimport androidx.activity.enableEdgeToEdge\nimport androidx.core.view.ViewCompat\nimport androidx.core.view.WindowInsetsCompat\nimport androidx.core.view.updatePadding\nimport androidx.lifecycle.Lifecycle\nimport com.example.playlistmaker.creator.Creator\nimport com.example.playlistmaker.presentation.ui.states.PlayerState\nimport com.example.playlistmaker.presentation.ui.states.TrackUi\n\nclass TrackPlayer : AppCompatActivity() {\n    private val playerInteractor by lazy { Creator.providePlayerInteractor() }\n    private val viewModel by lazy { PlayerViewModel(playerInteractor) }\n    private lateinit var track: TrackUi\n\n    @SuppressLint(\"MissingInflatedId\")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContentView(R.layout.track_player)\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.track_player)) { view, insets ->\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n            view.updatePadding(\n                top = systemBars.top,\n                bottom = systemBars.bottom\n            )\n            insets\n        }\n\n        track = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n            intent.getParcelableExtra(\"TRACK\", TrackUi::class.java)\n        } else {\n            @Suppress(\"DEPRECATION\")\n            intent.getParcelableExtra(\"TRACK\")\n        } ?: run {\n            finish()\n            return\n        }\n\n        displayTrackDetails(track)\n        setupButtonListeners()\n        setupObservers()\n\n        track.previewUrl?.let { _ ->\n            viewModel.preparePlayer(track)\n        } ?: run {\n            findViewById<ImageButton>(R.id.pause).isEnabled = false\n        }\n    }\n\n    private fun displayTrackDetails(track: TrackUi) {\n        findViewById<TextView>(R.id.track_name).text = track.trackName\n        findViewById<TextView>(R.id.artist_name).text = track.artistName\n        findViewById<TextView>(R.id.track_time).text = TrackUtils.formatTrackTime(track.trackTimeMillis)\n        findViewById<TextView>(R.id.track_time_now).text = \"00:00\"\n        findViewById<TextView>(R.id.year_label_text).text = track.getReleaseYear()\n        findViewById<TextView>(R.id.genre_label_text).text = track.genre\n        findViewById<TextView>(R.id.country_label_text).text = track.country\n\n        val artworkUrl = track.artworkUrl?.replace(\"100x100bb.jpg\", \"512x512bb.jpg\")\n        Glide.with(this)\n            .load(artworkUrl)\n            .placeholder(R.drawable.placeholder_track)\n            .error(R.drawable.error)\n            .centerCrop()\n            .into(findViewById(R.id.item_image))\n    }\n\n    private fun setupButtonListeners() {\n        findViewById<ImageButton>(R.id.menu_button).setOnClickListener {\n            when (val state = viewModel.playerState.value) {\n                is PlayerState.Playing -> viewModel.pausePlayer()\n                else -> {} // Ничего не делаем для других состояний\n            }\n            finish()\n        }\n\n        findViewById<ImageButton>(R.id.pause).apply {\n            isEnabled = false\n            setOnClickListener { viewModel.playbackControl() }\n        }\n    }\n\n    private fun setupObservers() {\n        lifecycleScope.launch {\n            repeatOnLifecycle(Lifecycle.State.STARTED) {\n                viewModel.playerState.collect { state ->\n                    when (state) {\n                        is PlayerState.Prepared -> {\n                            findViewById<ImageButton>(R.id.pause).isEnabled = true\n                            findViewById<TextView>(R.id.track_time_now).text =\n                                TrackUtils.formatTrackTime(state.position)\n                            findViewById<ImageButton>(R.id.pause).setImageResource(R.drawable.pause)\n                        }\n                        is PlayerState.Playing -> {\n                            findViewById<ImageButton>(R.id.pause).isEnabled = true\n                            findViewById<ImageButton>(R.id.pause).setImageResource(R.drawable.play)\n                            findViewById<TextView>(R.id.track_time_now).text =\n                                TrackUtils.formatTrackTime(state.position)\n                        }\n                        is PlayerState.Paused -> {\n                            findViewById<ImageButton>(R.id.pause).isEnabled = true\n                            findViewById<ImageButton>(R.id.pause).setImageResource(R.drawable.pause)\n                            findViewById<TextView>(R.id.track_time_now).text =\n                                TrackUtils.formatTrackTime(state.position)\n                        }\n                        is PlayerState.Error -> {\n                            findViewById<ImageButton>(R.id.pause).isEnabled = false\n                        }\n                        is PlayerState.Default -> {\n                            findViewById<ImageButton>(R.id.pause).isEnabled = false\n                            findViewById<TextView>(R.id.track_time_now).text = \"00:00\"\n                        }\n                        is PlayerState.Progress -> {\n                            findViewById<ImageButton>(R.id.pause).isEnabled = false\n                            findViewById<TextView>(R.id.track_time_now).text =\n                                TrackUtils.formatTrackTime(state.position)\n                        }\n                        is PlayerState.Complete -> {\n                            findViewById<ImageButton>(R.id.pause).isEnabled = false\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    override fun onPause() {\n        super.onPause()\n        when (viewModel.playerState.value) {\n            is PlayerState.Playing -> viewModel.pausePlayer()\n            else -> {}\n        }\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        viewModel.releasePlayer()\n    }\n\n    companion object {\n        fun getIntent(context: Context, track: TrackUi): Intent {\n            return Intent(context, TrackPlayer::class.java).apply {\n                putExtra(\"TRACK\", track)\n            }\n        }\n    }\n}
===================================================================
diff --git a/app/src/main/java/com/example/playlistmaker/presentation/ui/activities/TrackPlayer.kt b/app/src/main/java/com/example/playlistmaker/presentation/ui/activities/TrackPlayer.kt
--- a/app/src/main/java/com/example/playlistmaker/presentation/ui/activities/TrackPlayer.kt	(revision 85341f49f551c005f0326bd5e38756e9b64522fd)
+++ b/app/src/main/java/com/example/playlistmaker/presentation/ui/activities/TrackPlayer.kt	(date 1753956938534)
@@ -20,13 +20,15 @@
 import androidx.core.view.WindowInsetsCompat
 import androidx.core.view.updatePadding
 import androidx.lifecycle.Lifecycle
-import com.example.playlistmaker.creator.Creator
+import com.example.playlistmaker.domain.interactors.PlayerInteractor
 import com.example.playlistmaker.presentation.ui.states.PlayerState
 import com.example.playlistmaker.presentation.ui.states.TrackUi
+import org.koin.android.ext.android.inject
+import org.koin.androidx.viewmodel.ext.android.viewModel
 
 class TrackPlayer : AppCompatActivity() {
-    private val playerInteractor by lazy { Creator.providePlayerInteractor() }
-    private val viewModel by lazy { PlayerViewModel(playerInteractor) }
+    private val playerInteractor: PlayerInteractor by inject()
+    private val viewModel: PlayerViewModel by viewModel()
     private lateinit var track: TrackUi
 
     @SuppressLint("MissingInflatedId")
Index: app/src/main/java/com/example/playlistmaker/data/repositories/PlayerRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.playlistmaker.domain.repositories.impl\n\nimport android.media.MediaPlayer\nimport com.example.playlistmaker.presentation.ui.states.PlayerState\nimport com.example.playlistmaker.domain.repositories.PlayerRepository\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.asStateFlow\n\nclass PlayerRepositoryImpl(\n    private val mediaPlayer: MediaPlayer\n) : PlayerRepository {\n    private val _playerState = MutableStateFlow<PlayerState>(PlayerState.Default(0L))\n    private val playerStateFlow = _playerState.asStateFlow()\n\n    init {\n        setupMediaPlayerListeners()\n    }\n\n    private fun setupMediaPlayerListeners() {\n        mediaPlayer.apply {\n            setOnPreparedListener {\n                _playerState.value = PlayerState.Prepared(0L)\n            }\n            setOnCompletionListener {\n                _playerState.value = PlayerState.Prepared(mediaPlayer.currentPosition.toLong())\n            }\n            setOnErrorListener { _, what, extra ->\n                _playerState.value = PlayerState.Error(what.toString(), extra, mediaPlayer.currentPosition.toLong())\n                true\n            }\n        }\n    }\n\n    override fun prepare(url: String): Flow<PlayerState> {\n        mediaPlayer.apply {\n            reset()\n            setDataSource(url)\n            prepareAsync()\n        }\n        return playerStateFlow\n    }\n\n    override fun play() {\n        mediaPlayer.start()\n        _playerState.value = PlayerState.Playing(mediaPlayer.currentPosition.toLong())\n    }\n\n    override fun pause() {\n        mediaPlayer.pause()\n        _playerState.value = PlayerState.Paused(mediaPlayer.currentPosition.toLong())\n    }\n\n    override fun release() {\n        mediaPlayer.release()\n        _playerState.value = PlayerState.Default(0L)\n    }\n\n    override fun getCurrentPosition(): Long {\n        return mediaPlayer.currentPosition.toLong()\n    }\n\n    override fun isPlaying(): Boolean {\n        return mediaPlayer.isPlaying\n    }\n\n    override fun playbackControl() {\n        if (mediaPlayer.isPlaying) {\n            pause()\n        } else {\n            play()\n        }\n    }\n}
===================================================================
diff --git a/app/src/main/java/com/example/playlistmaker/data/repositories/PlayerRepositoryImpl.kt b/app/src/main/java/com/example/playlistmaker/data/repositories/PlayerRepositoryImpl.kt
--- a/app/src/main/java/com/example/playlistmaker/data/repositories/PlayerRepositoryImpl.kt	(revision 85341f49f551c005f0326bd5e38756e9b64522fd)
+++ b/app/src/main/java/com/example/playlistmaker/data/repositories/PlayerRepositoryImpl.kt	(date 1753954242580)
@@ -1,4 +1,4 @@
-package com.example.playlistmaker.domain.repositories.impl
+package com.example.playlistmaker.data.repositories
 
 import android.media.MediaPlayer
 import com.example.playlistmaker.presentation.ui.states.PlayerState
Index: app/src/main/java/com/example/playlistmaker/presentation/ui/activities/SettingsActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.playlistmaker.presentation.ui.activities\nimport android.annotation.SuppressLint\nimport android.content.Intent\nimport android.content.res.ColorStateList\nimport android.net.Uri\nimport android.os.Bundle\nimport androidx.activity.enableEdgeToEdge\nimport androidx.activity.viewModels\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.app.AppCompatDelegate\nimport androidx.core.content.ContextCompat\nimport androidx.core.view.ViewCompat\nimport androidx.core.view.WindowInsetsCompat\nimport androidx.core.view.updatePadding\nimport com.example.playlistmaker.R\nimport com.example.playlistmaker.creator.Creator\nimport com.example.playlistmaker.presentation.viewmodels.SettingsViewModel\nimport com.google.android.material.button.MaterialButton\nimport com.google.android.material.switchmaterial.SwitchMaterial\n\n\nclass SettingsActivity : AppCompatActivity() {\n    private val viewModel: SettingsViewModel by viewModels { Creator.provideSettingsViewModelFactory() }\n\n    @SuppressLint(\"WrongViewCast\", \"MissingInflatedId\")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContentView(R.layout.settings)\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.settings)) { view, insets ->\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n            view.updatePadding(\n                top = systemBars.top,\n                bottom = systemBars.bottom\n            )\n            insets\n        }\n\n        val switchMaterial: SwitchMaterial = findViewById(R.id.themeSwitcher)\n        viewModel.isDarkTheme.observe(this) { isDarkTheme ->\n            switchMaterial.isChecked = isDarkTheme\n            applyTheme(isDarkTheme)\n        }\n        switchMaterial.setOnCheckedChangeListener { _, checked ->\n            viewModel.switchTheme(checked)\n        }\n\n\n        val states = arrayOf(\n            intArrayOf(android.R.attr.state_checked),\n            intArrayOf(-android.R.attr.state_checked)\n        )\n\n        val colors = intArrayOf(\n            ContextCompat.getColor(this, R.color.blue_switch),\n            ContextCompat.getColor(this, R.color.grey_switch),\n        )\n        val colorsTrack = intArrayOf(\n            ContextCompat.getColor(this, R.color.blue_switch_light),\n            ContextCompat.getColor(this, R.color.grey_switch_light)\n        )\n\n        val thumbColorStateList = ColorStateList(states, colors)\n        val trackColorStateList = ColorStateList(states, colorsTrack)\n        switchMaterial.thumbTintList = thumbColorStateList\n        switchMaterial.trackTintList = trackColorStateList\n\n        val backButton = findViewById<MaterialButton>(R.id.button_back)\n        backButton?.setOnClickListener {\n            finish()\n        }\n\n        val shareButton = findViewById<MaterialButton>(R.id.button_share_settings)\n        shareButton.setOnClickListener {\n            val shareIntent = shareApp()\n            startActivity(Intent.createChooser(shareIntent, getString(R.string.share_app)))\n        }\n\n        val supportButton = findViewById<MaterialButton>(R.id.support_button)\n        supportButton?.setOnClickListener {\n            val developerEmail = getString(R.string.developer_email)\n            val subject = getString(R.string.support_email_subject)\n            val body = getString(R.string.support_email_body)\n            val intent = Intent(Intent.ACTION_SENDTO).apply {\n                data = Uri.parse(\"mailto:\")\n                putExtra(Intent.EXTRA_EMAIL, arrayOf(developerEmail))\n                putExtra(Intent.EXTRA_SUBJECT, subject)\n                putExtra(Intent.EXTRA_TEXT, body)\n            }\n            if (intent.resolveActivity(packageManager) != null) {\n                startActivity(intent)\n            }\n        }\n\n        val linkButton = findViewById<MaterialButton>(R.id.link_button)\n        linkButton.setOnClickListener {\n            val link = getString(R.string.link)\n            val intent = Intent(Intent.ACTION_VIEW).apply {\n                data = Uri.parse(\"mailto:\")\n            }\n            startActivity(intent)\n        }\n    }\n\n    private fun shareApp(): Intent {\n        val shareText = getString(R.string.adress_practicum)\n        return Intent().apply {\n            action = Intent.ACTION_SEND\n            putExtra(Intent.EXTRA_TEXT, shareText)\n            type = \"text/plain\"\n        }\n    }\n    private fun applyTheme(isDarkTheme: Boolean) {\n        AppCompatDelegate.setDefaultNightMode(\n            if (isDarkTheme) {\n                AppCompatDelegate.MODE_NIGHT_YES\n            } else {\n                AppCompatDelegate.MODE_NIGHT_NO\n            }\n        )\n    }\n}
===================================================================
diff --git a/app/src/main/java/com/example/playlistmaker/presentation/ui/activities/SettingsActivity.kt b/app/src/main/java/com/example/playlistmaker/presentation/ui/activities/SettingsActivity.kt
--- a/app/src/main/java/com/example/playlistmaker/presentation/ui/activities/SettingsActivity.kt	(revision 85341f49f551c005f0326bd5e38756e9b64522fd)
+++ b/app/src/main/java/com/example/playlistmaker/presentation/ui/activities/SettingsActivity.kt	(date 1753956868908)
@@ -5,7 +5,6 @@
 import android.net.Uri
 import android.os.Bundle
 import androidx.activity.enableEdgeToEdge
-import androidx.activity.viewModels
 import androidx.appcompat.app.AppCompatActivity
 import androidx.appcompat.app.AppCompatDelegate
 import androidx.core.content.ContextCompat
@@ -13,14 +12,14 @@
 import androidx.core.view.WindowInsetsCompat
 import androidx.core.view.updatePadding
 import com.example.playlistmaker.R
-import com.example.playlistmaker.creator.Creator
 import com.example.playlistmaker.presentation.viewmodels.SettingsViewModel
 import com.google.android.material.button.MaterialButton
 import com.google.android.material.switchmaterial.SwitchMaterial
+import org.koin.androidx.viewmodel.ext.android.viewModel
 
 
 class SettingsActivity : AppCompatActivity() {
-    private val viewModel: SettingsViewModel by viewModels { Creator.provideSettingsViewModelFactory() }
+    private val viewModel: SettingsViewModel by viewModel()
 
     @SuppressLint("WrongViewCast", "MissingInflatedId")
     override fun onCreate(savedInstanceState: Bundle?) {
Index: app/src/main/java/com/example/playlistmaker/presentation/ui/activities/SearchActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.playlistmaker.presentation.ui.activities\n\nimport android.annotation.SuppressLint\nimport android.content.BroadcastReceiver\nimport android.content.Context\nimport android.content.Intent\nimport android.content.IntentFilter\nimport android.net.ConnectivityManager\nimport android.net.NetworkCapabilities\nimport android.os.Build\nimport android.os.Bundle\nimport android.os.Handler\nimport android.os.Looper\nimport android.view.MotionEvent\nimport android.view.View\nimport android.view.inputmethod.EditorInfo\nimport android.view.inputmethod.InputMethodManager\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.ImageView\nimport android.widget.LinearLayout\nimport android.widget.TextView\nimport androidx.activity.enableEdgeToEdge\nimport androidx.activity.viewModels\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.content.ContextCompat\nimport androidx.core.view.ViewCompat\nimport androidx.core.view.WindowInsetsCompat\nimport androidx.core.view.updatePadding\nimport androidx.core.widget.doAfterTextChanged\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.lifecycleScope\nimport androidx.lifecycle.repeatOnLifecycle\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.example.playlistmaker.R\nimport com.example.playlistmaker.creator.Creator\nimport com.example.playlistmaker.presentation.ui.adapters.TrackAdapter\nimport com.example.playlistmaker.presentation.ui.states.SearchState\nimport com.example.playlistmaker.presentation.ui.states.TrackUi\nimport com.example.playlistmaker.presentation.viewmodels.SearchViewModel\nimport com.google.android.material.button.MaterialButton\nimport com.google.android.material.progressindicator.CircularProgressIndicator\nimport kotlinx.coroutines.launch\n\nclass SearchActivity : AppCompatActivity() {\n\n    private val viewModel: SearchViewModel by viewModels { Creator.provideSearchViewModelFactory() }\n\n    private lateinit var inputEditText: EditText\n    private lateinit var recycler: RecyclerView\n    private lateinit var emptyStateContainer: LinearLayout\n    private lateinit var errorStateContainer: LinearLayout\n    private lateinit var placeholderMessage: TextView\n    private lateinit var connectionErrorMessage: TextView\n    private lateinit var adapter: TrackAdapter\n    private lateinit var clearHistoryButton: Button\n    private lateinit var historyTitle: TextView\n    private lateinit var clearIcon: ImageView\n    private lateinit var progressBar: CircularProgressIndicator\n\n    private val handler = Handler(Looper.getMainLooper())\n    private var searchRunnable: Runnable? = null\n    private val debounceDelay = 2000L\n\n    private val networkChangeReceiver = object : BroadcastReceiver() {\n        override fun onReceive(context: Context?, intent: Intent?) {\n            if (isNetworkAvailable()) {\n                connectionErrorMessage.text = \"Интернет доступен\"\n                inputEditText.text?.toString()?.let { viewModel.searchTracks(it) }\n            } else {\n                showErrorState(\"Проблемы со связью\")\n            }\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        val filter = IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION)\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            registerReceiver(networkChangeReceiver, filter, RECEIVER_NOT_EXPORTED)\n        } else {\n            @Suppress(\"DEPRECATION\")\n            registerReceiver(networkChangeReceiver, filter)\n        }\n    }\n\n    @SuppressLint(\"ClickableViewAccessibility\", \"SoonBlockedPrivateApi\", \"MissingInflatedId\")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContentView(R.layout.activity_searcch)\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.search)) { view, insets ->\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n            view.updatePadding(\n                top = systemBars.top,\n                bottom = systemBars.bottom\n            )\n            insets\n        }\n\n\n        initViews()\n        setupAdapter()\n        setupListeners()\n        observeViewModel()\n        checkNetworkState()\n    }\n\n    @SuppressLint(\"SoonBlockedPrivateApi\")\n    private fun initViews() {\n        inputEditText = findViewById(R.id.inputEditText)\n        recycler = findViewById(R.id.tracksList)\n        emptyStateContainer = findViewById(R.id.emptyStateContainer)\n        errorStateContainer = findViewById(R.id.errorStateContainer)\n        placeholderMessage = findViewById(R.id.placeholderMessage)\n        connectionErrorMessage = findViewById(R.id.connectionErrorMessage)\n        clearHistoryButton = findViewById(R.id.clearHistoryButton)\n        historyTitle = findViewById(R.id.historyTitle)\n        clearIcon = findViewById(R.id.clearIcon)\n        progressBar = findViewById(R.id.progressBar)\n\n        try {\n            val field = TextView::class.java.getDeclaredField(\"mCursorDrawableRes\")\n            field.isAccessible = true\n            field.set(inputEditText, R.drawable.cursor_blue)\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n\n    private fun setupAdapter() {\n        adapter = TrackAdapter(emptyList()) { trackUi ->\n            val track = TrackUi.toDomain(trackUi)\n            viewModel.addTrackToHistory(track)\n            val currentState = viewModel.searchState.value\n            startActivity(TrackPlayer.getIntent(this, trackUi))\n\n        }\n        recycler.layoutManager = LinearLayoutManager(this)\n        recycler.adapter = adapter\n    }\n\n\n    @SuppressLint(\"ClickableViewAccessibility\")\n    private fun setupListeners() {\n        findViewById<MaterialButton>(R.id.button_back).setOnClickListener { finish() }\n        clearIcon.setOnClickListener {\n            clearSearchInput()\n        }\n\n        clearHistoryButton.setOnClickListener { viewModel.clearSearchHistory() }\n\n        inputEditText.doAfterTextChanged { text ->\n            if (text.isNullOrEmpty()) {\n                showSearchIcon()\n                viewModel.searchTracks(\"\")\n            } else {\n                showClearIcon()\n                scheduleSearch(text.toString())\n            }\n        }\n\n        inputEditText.setOnTouchListener { _, event ->\n            if (event.action == MotionEvent.ACTION_UP &&\n                event.rawX >= (inputEditText.right - inputEditText.compoundPaddingEnd)\n            ) {\n                clearSearchInput()\n                true\n            } else false\n        }\n\n        inputEditText.setOnEditorActionListener { _, actionId, _ ->\n            if (actionId == EditorInfo.IME_ACTION_DONE) {\n                performSearch()\n                true\n            } else false\n        }\n    }\n\n    private fun showSearchIcon() {\n        inputEditText.setCompoundDrawablesRelativeWithIntrinsicBounds(\n            ContextCompat.getDrawable(this, R.drawable.baseline_search_24),\n            null, null, null\n        )\n    }\n\n    private fun showClearIcon() {\n        inputEditText.setCompoundDrawablesRelativeWithIntrinsicBounds(\n            ContextCompat.getDrawable(this, R.drawable.baseline_search_24),\n            null,\n            ContextCompat.getDrawable(this, R.drawable.baseline_clear_24),\n            null\n        )\n    }\n\n    private fun observeViewModel() {\n        lifecycleScope.launch {\n            repeatOnLifecycle(Lifecycle.State.STARTED) {\n                viewModel.searchState.collect { state ->\n                    when (state) {\n                        is SearchState.Loading -> {\n                            if (!inputEditText.text.isNullOrEmpty()) {\n                                showLoading()\n                            }\n                        }\n                        is SearchState.Content -> showContent(state.tracks)\n                        SearchState.Empty -> showEmptyState()\n\n                        is SearchState.History -> {\n                            showHistory(state.tracks)\n                        }\n                        is SearchState.Error -> showErrorState(state.message, isNetworkError = true)\n                        is SearchState.EmptyError -> showErrorState(state.message, isNetworkError = false)\n                        SearchState.EmptyHistory -> showEmptyHistoryState()\n                    }\n                }\n            }\n        }\n    }\n\n    private fun showCleanHistoryState() {\n        progressBar.visibility = View.GONE\n        recycler.visibility = View.GONE\n        emptyStateContainer.visibility = View.GONE\n        errorStateContainer.visibility = View.GONE\n        clearHistoryButton.visibility = View.GONE\n        historyTitle.visibility = View.GONE\n    }\n\n    private fun showLoading() {\n        progressBar.visibility = View.VISIBLE\n        recycler.visibility = View.GONE\n        emptyStateContainer.visibility = View.GONE\n        errorStateContainer.visibility = View.GONE\n        clearHistoryButton.visibility = View.GONE\n        historyTitle.visibility = View.GONE\n        progressBar.bringToFront()\n    }\n    private fun showEmptyHistoryState() {\n        progressBar.visibility = View.GONE\n        recycler.visibility = View.GONE\n        emptyStateContainer.visibility = View.GONE\n        errorStateContainer.visibility = View.GONE\n        clearHistoryButton.visibility = View.GONE\n        historyTitle.visibility = View.GONE\n        adapter.updateTracks(emptyList())\n    }\n\n\n    private fun showContent(tracks: List<TrackUi>) {\n        adapter.updateTracks(tracks)\n        progressBar.visibility = View.GONE\n        recycler.visibility = View.VISIBLE\n        emptyStateContainer.visibility = View.GONE\n        errorStateContainer.visibility = View.GONE\n        clearHistoryButton.visibility = View.GONE\n        historyTitle.visibility = View.GONE\n    }\n\n    private fun showEmptyState() {\n        progressBar.visibility = View.GONE\n        recycler.visibility = View.GONE\n        emptyStateContainer.visibility = View.VISIBLE\n        errorStateContainer.visibility = View.GONE\n        clearHistoryButton.visibility = View.GONE\n        historyTitle.visibility = View.GONE\n    }\n\n    private fun showErrorState(message: String) {\n        progressBar.visibility = View.GONE\n        recycler.visibility = View.GONE\n        emptyStateContainer.visibility = View.GONE\n        errorStateContainer.visibility = View.VISIBLE\n        connectionErrorMessage.text = message\n    }\n\n    private fun showHistory(tracks: List<TrackUi>) {\n        if (tracks.isNotEmpty()) {\n            adapter.updateTracks(tracks) // Просто используем tracks как есть\n            recycler.visibility = View.VISIBLE\n            emptyStateContainer.visibility = View.GONE\n            errorStateContainer.visibility = View.GONE\n            clearHistoryButton.visibility = View.VISIBLE\n            historyTitle.visibility = View.VISIBLE\n        } else {\n            showCleanHistoryState()\n        }\n    }\n\n    private fun scheduleSearch(query: String) {\n        searchRunnable?.let { handler.removeCallbacks(it) }\n        searchRunnable = Runnable { viewModel.searchTracks(query) }\n        handler.postDelayed(searchRunnable!!, debounceDelay)\n    }\n\n    private fun performSearch() {\n        searchRunnable?.let { handler.removeCallbacks(it) }\n        inputEditText.text?.toString()?.let { viewModel.searchTracks(it) }\n        hideKeyboard()\n    }\n\n    private fun clearSearchInput() {\n        inputEditText.setText(\"\")\n        hideKeyboard()\n        viewModel.clearSearch()\n    }\n\n    private fun hideKeyboard() {\n        (getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager)\n            .hideSoftInputFromWindow(inputEditText.windowToken, 0)\n    }\n\n    private fun checkNetworkState() {\n        if (!isNetworkAvailable()) {\n            showErrorState(\"Нет подключения к интернету\")\n        }\n    }\n\n    override fun onPause() {\n        super.onPause()\n        searchRunnable?.let { handler.removeCallbacks(it) }\n        unregisterReceiver(networkChangeReceiver)\n    }\n    private fun showErrorState(message: String, isNetworkError: Boolean) {\n        progressBar.visibility = View.GONE\n        recycler.visibility = View.GONE\n        emptyStateContainer.visibility = View.GONE\n        errorStateContainer.visibility = View.VISIBLE\n\n        val errorImage = errorStateContainer.findViewById<ImageView>(R.id.errorImageView)\n        val errorText = errorStateContainer.findViewById<TextView>(R.id.connectionErrorMessage)\n        val retryButton = errorStateContainer.findViewById<Button>(R.id.retryButton)\n\n        errorImage.setImageResource(\n            if (isNetworkError) R.drawable.error else R.drawable.empty\n        )\n        errorText.text = message\n\n        retryButton.visibility = if (isNetworkError) View.VISIBLE else View.GONE\n        retryButton.setOnClickListener {\n            inputEditText.text?.toString()?.let { query ->\n                viewModel.searchTracks(query)\n            }\n        }\n    }\n    @SuppressLint(\"MissingPermission\")\n    private fun isNetworkAvailable(): Boolean {\n        val connectivityManager = getSystemService(CONNECTIVITY_SERVICE) as ConnectivityManager\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            val network = connectivityManager.activeNetwork\n            val capabilities = connectivityManager.getNetworkCapabilities(network)\n            return capabilities != null &&\n                    (capabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) ||\n                            capabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR))\n        } else {\n            @Suppress(\"DEPRECATION\")\n            return connectivityManager.activeNetworkInfo?.isConnected == true\n        }\n    }\n\n}
===================================================================
diff --git a/app/src/main/java/com/example/playlistmaker/presentation/ui/activities/SearchActivity.kt b/app/src/main/java/com/example/playlistmaker/presentation/ui/activities/SearchActivity.kt
--- a/app/src/main/java/com/example/playlistmaker/presentation/ui/activities/SearchActivity.kt	(revision 85341f49f551c005f0326bd5e38756e9b64522fd)
+++ b/app/src/main/java/com/example/playlistmaker/presentation/ui/activities/SearchActivity.kt	(date 1753956854388)
@@ -34,7 +34,6 @@
 import androidx.recyclerview.widget.LinearLayoutManager
 import androidx.recyclerview.widget.RecyclerView
 import com.example.playlistmaker.R
-import com.example.playlistmaker.creator.Creator
 import com.example.playlistmaker.presentation.ui.adapters.TrackAdapter
 import com.example.playlistmaker.presentation.ui.states.SearchState
 import com.example.playlistmaker.presentation.ui.states.TrackUi
@@ -42,10 +41,11 @@
 import com.google.android.material.button.MaterialButton
 import com.google.android.material.progressindicator.CircularProgressIndicator
 import kotlinx.coroutines.launch
+import org.koin.androidx.viewmodel.ext.android.viewModel
 
 class SearchActivity : AppCompatActivity() {
 
-    private val viewModel: SearchViewModel by viewModels { Creator.provideSearchViewModelFactory() }
+    private val viewModel: SearchViewModel by viewModel()
 
     private lateinit var inputEditText: EditText
     private lateinit var recycler: RecyclerView
Index: app/src/main/java/com/example/playlistmaker/presentation/App.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.playlistmaker.presentation\n\nimport android.app.Application\nimport androidx.appcompat.app.AppCompatDelegate\nimport com.example.playlistmaker.creator.Creator\nimport com.example.playlistmaker.domain.interactors.SettingsInteractor\nimport kotlinx.coroutines.runBlocking\n\nclass App : Application() {\n    private lateinit var settingsInteractor: SettingsInteractor\n\n    override fun onCreate() {\n        super.onCreate()\n        Creator.init(this)\n        settingsInteractor = Creator.provideSettingsInteractor()\n\n        runBlocking {\n            val darkTheme = settingsInteractor.getThemeSettings()\n            AppCompatDelegate.setDefaultNightMode(\n                if (darkTheme) AppCompatDelegate.MODE_NIGHT_YES\n                else AppCompatDelegate.MODE_NIGHT_NO\n            )\n        }\n    }\n}
===================================================================
diff --git a/app/src/main/java/com/example/playlistmaker/presentation/App.kt b/app/src/main/java/com/example/playlistmaker/presentation/App.kt
--- a/app/src/main/java/com/example/playlistmaker/presentation/App.kt	(revision 85341f49f551c005f0326bd5e38756e9b64522fd)
+++ b/app/src/main/java/com/example/playlistmaker/presentation/App.kt	(date 1753957181039)
@@ -2,18 +2,29 @@
 
 import android.app.Application
 import androidx.appcompat.app.AppCompatDelegate
-import com.example.playlistmaker.creator.Creator
+import com.example.playlistmaker.DI.dataModule
+import com.example.playlistmaker.DI.interactorModule
+import com.example.playlistmaker.DI.repositoryModule
+import com.example.playlistmaker.DI.viewModelModule
 import com.example.playlistmaker.domain.interactors.SettingsInteractor
 import kotlinx.coroutines.runBlocking
+import org.koin.android.ext.android.inject
+import org.koin.android.ext.koin.androidContext
+import org.koin.core.context.GlobalContext.startKoin
 
 class App : Application() {
-    private lateinit var settingsInteractor: SettingsInteractor
-
+    private val settingsInteractor: SettingsInteractor by inject()
     override fun onCreate() {
         super.onCreate()
-        Creator.init(this)
-        settingsInteractor = Creator.provideSettingsInteractor()
-
+        startKoin {
+            androidContext(this@App)
+            modules(
+                dataModule,
+                repositoryModule,
+                interactorModule,
+                viewModelModule
+            )
+        }
         runBlocking {
             val darkTheme = settingsInteractor.getThemeSettings()
             AppCompatDelegate.setDefaultNightMode(
